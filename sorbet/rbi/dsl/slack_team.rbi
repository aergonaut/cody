# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SlackTeam`.
# Please instead update this file by running `tapioca dsl --gen ActiveRecordColumns ActiveRecordAssociations ActiveRecordScope`.

# typed: strict
class SlackTeam
  include SlackTeam::GeneratedAttributeMethods
end

module SlackTeam::GeneratedAttributeMethods
  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_before_last_save; end

  sig { returns(T.untyped) }
  def created_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def created_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def created_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_previous_change; end

  sig { returns(T::Boolean) }
  def created_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_was; end

  sig { void }
  def created_at_will_change!; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def encrypted_bot_access_token=(value); end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_before_last_save; end

  sig { returns(T.untyped) }
  def encrypted_bot_access_token_before_type_cast; end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_bot_access_token_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_bot_access_token_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_in_database; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_iv; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def encrypted_bot_access_token_iv=(value); end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_iv?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_iv_before_last_save; end

  sig { returns(T.untyped) }
  def encrypted_bot_access_token_iv_before_type_cast; end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_iv_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_bot_access_token_iv_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_bot_access_token_iv_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_iv_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_iv_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_bot_access_token_iv_previous_change; end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_iv_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_iv_previously_was; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_iv_was; end

  sig { void }
  def encrypted_bot_access_token_iv_will_change!; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_bot_access_token_previous_change; end

  sig { returns(T::Boolean) }
  def encrypted_bot_access_token_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_previously_was; end

  sig { returns(T.nilable(::String)) }
  def encrypted_bot_access_token_was; end

  sig { void }
  def encrypted_bot_access_token_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { returns(::String) }
  def name; end

  sig { params(value: ::String).returns(::String) }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(::String)) }
  def name_before_last_save; end

  sig { returns(T.untyped) }
  def name_before_type_cast; end

  sig { returns(T::Boolean) }
  def name_came_from_user?; end

  sig { returns(T.nilable([::String, ::String])) }
  def name_change; end

  sig { returns(T.nilable([::String, ::String])) }
  def name_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def name_changed?; end

  sig { returns(T.nilable(::String)) }
  def name_in_database; end

  sig { returns(T.nilable([::String, ::String])) }
  def name_previous_change; end

  sig { returns(T::Boolean) }
  def name_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def name_previously_was; end

  sig { returns(T.nilable(::String)) }
  def name_was; end

  sig { void }
  def name_will_change!; end

  sig { void }
  def restore_created_at!; end

  sig { void }
  def restore_encrypted_bot_access_token!; end

  sig { void }
  def restore_encrypted_bot_access_token_iv!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_name!; end

  sig { void }
  def restore_team_id!; end

  sig { void }
  def restore_updated_at!; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_created_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_created_at?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_encrypted_bot_access_token; end

  sig { returns(T::Boolean) }
  def saved_change_to_encrypted_bot_access_token?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_encrypted_bot_access_token_iv; end

  sig { returns(T::Boolean) }
  def saved_change_to_encrypted_bot_access_token_iv?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([::String, ::String])) }
  def saved_change_to_name; end

  sig { returns(T::Boolean) }
  def saved_change_to_name?; end

  sig { returns(T.nilable([::String, ::String])) }
  def saved_change_to_team_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_team_id?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_updated_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_updated_at?; end

  sig { returns(::String) }
  def team_id; end

  sig { params(value: ::String).returns(::String) }
  def team_id=(value); end

  sig { returns(T::Boolean) }
  def team_id?; end

  sig { returns(T.nilable(::String)) }
  def team_id_before_last_save; end

  sig { returns(T.untyped) }
  def team_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def team_id_came_from_user?; end

  sig { returns(T.nilable([::String, ::String])) }
  def team_id_change; end

  sig { returns(T.nilable([::String, ::String])) }
  def team_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def team_id_changed?; end

  sig { returns(T.nilable(::String)) }
  def team_id_in_database; end

  sig { returns(T.nilable([::String, ::String])) }
  def team_id_previous_change; end

  sig { returns(T::Boolean) }
  def team_id_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def team_id_previously_was; end

  sig { returns(T.nilable(::String)) }
  def team_id_was; end

  sig { void }
  def team_id_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_before_last_save; end

  sig { returns(T.untyped) }
  def updated_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def updated_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def updated_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_previous_change; end

  sig { returns(T::Boolean) }
  def updated_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_was; end

  sig { void }
  def updated_at_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_created_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_encrypted_bot_access_token?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_encrypted_bot_access_token_iv?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_name?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_team_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_updated_at?; end
end
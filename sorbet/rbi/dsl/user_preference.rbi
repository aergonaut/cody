# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `UserPreference`.
# Please instead update this file by running `tapioca dsl`.

# typed: strict
class UserPreference
  include UserPreference::GeneratedAssociationMethods
  include UserPreference::GeneratedAttributeMethods
  extend UserPreference::GeneratedRelationMethods
end

module UserPreference::GeneratedAssociationMethods
  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def build_user(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def create_user(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def create_user!(*args, &blk); end

  sig { returns(T.nilable(::User)) }
  def reload_user; end

  sig { returns(T.nilable(::User)) }
  def user; end

  sig { params(value: T.nilable(::User)).void }
  def user=(value); end
end

module UserPreference::GeneratedAttributeMethods
  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { returns(T.nilable(T::Boolean)) }
  def paused; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def paused=(value); end

  sig { returns(T::Boolean) }
  def paused?; end

  sig { returns(T.nilable(T::Boolean)) }
  def paused_before_last_save; end

  sig { returns(T.untyped) }
  def paused_before_type_cast; end

  sig { returns(T::Boolean) }
  def paused_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def paused_change; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def paused_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def paused_changed?; end

  sig { returns(T.nilable(T::Boolean)) }
  def paused_in_database; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def paused_previous_change; end

  sig { returns(T::Boolean) }
  def paused_previously_changed?; end

  sig { returns(T.nilable(T::Boolean)) }
  def paused_previously_was; end

  sig { returns(T.nilable(T::Boolean)) }
  def paused_was; end

  sig { void }
  def paused_will_change!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_paused!; end

  sig { void }
  def restore_send_new_reviews_summary!; end

  sig { void }
  def restore_timezone!; end

  sig { void }
  def restore_user_id!; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def saved_change_to_paused; end

  sig { returns(T::Boolean) }
  def saved_change_to_paused?; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def saved_change_to_send_new_reviews_summary; end

  sig { returns(T::Boolean) }
  def saved_change_to_send_new_reviews_summary?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_timezone; end

  sig { returns(T::Boolean) }
  def saved_change_to_timezone?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_user_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_user_id?; end

  sig { returns(T.nilable(T::Boolean)) }
  def send_new_reviews_summary; end

  sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
  def send_new_reviews_summary=(value); end

  sig { returns(T::Boolean) }
  def send_new_reviews_summary?; end

  sig { returns(T.nilable(T::Boolean)) }
  def send_new_reviews_summary_before_last_save; end

  sig { returns(T.untyped) }
  def send_new_reviews_summary_before_type_cast; end

  sig { returns(T::Boolean) }
  def send_new_reviews_summary_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def send_new_reviews_summary_change; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def send_new_reviews_summary_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def send_new_reviews_summary_changed?; end

  sig { returns(T.nilable(T::Boolean)) }
  def send_new_reviews_summary_in_database; end

  sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
  def send_new_reviews_summary_previous_change; end

  sig { returns(T::Boolean) }
  def send_new_reviews_summary_previously_changed?; end

  sig { returns(T.nilable(T::Boolean)) }
  def send_new_reviews_summary_previously_was; end

  sig { returns(T.nilable(T::Boolean)) }
  def send_new_reviews_summary_was; end

  sig { void }
  def send_new_reviews_summary_will_change!; end

  sig { returns(T.nilable(::String)) }
  def timezone; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def timezone=(value); end

  sig { returns(T::Boolean) }
  def timezone?; end

  sig { returns(T.nilable(::String)) }
  def timezone_before_last_save; end

  sig { returns(T.untyped) }
  def timezone_before_type_cast; end

  sig { returns(T::Boolean) }
  def timezone_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def timezone_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def timezone_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def timezone_changed?; end

  sig { returns(T.nilable(::String)) }
  def timezone_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def timezone_previous_change; end

  sig { returns(T::Boolean) }
  def timezone_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def timezone_previously_was; end

  sig { returns(T.nilable(::String)) }
  def timezone_was; end

  sig { void }
  def timezone_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def user_id; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def user_id=(value); end

  sig { returns(T::Boolean) }
  def user_id?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_before_last_save; end

  sig { returns(T.untyped) }
  def user_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def user_id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def user_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_previous_change; end

  sig { returns(T::Boolean) }
  def user_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_was; end

  sig { void }
  def user_id_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_paused?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_send_new_reviews_summary?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_timezone?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_user_id?; end
end

module UserPreference::GeneratedRelationMethods
  sig { params(args: T.untyped, blk: T.untyped).returns(T.untyped) }
  def paused(*args, &blk); end
end
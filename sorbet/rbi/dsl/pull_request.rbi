# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PullRequest`.
# Please instead update this file by running `tapioca dsl`.

# typed: false
class PullRequest
  include PullRequest::GeneratedAssociationMethods
  include PullRequest::GeneratedAttributeMethods
  extend PullRequest::GeneratedRelationMethods
end

module PullRequest::GeneratedAssociationMethods
  sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
  def build_parent_pull_request(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
  def build_repository(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
  def create_parent_pull_request(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequest) }
  def create_parent_pull_request!(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
  def create_repository(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
  def create_repository!(*args, &blk); end

  sig { returns(T.nilable(::PullRequest)) }
  def parent_pull_request; end

  sig { params(value: T.nilable(::PullRequest)).void }
  def parent_pull_request=(value); end

  sig { returns(T.nilable(::PullRequest)) }
  def reload_parent_pull_request; end

  sig { returns(T.nilable(::Repository)) }
  def reload_repository; end

  sig { returns(T.nilable(::Repository)) }
  def repository; end

  sig { params(value: T.nilable(::Repository)).void }
  def repository=(value); end

  sig { returns(T::Array[T.untyped]) }
  def reviewer_ids; end

  sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
  def reviewer_ids=(ids); end

  sig { returns(::ActiveRecord::Associations::CollectionProxy[Reviewer]) }
  def reviewers; end

  sig { params(value: T::Enumerable[::Reviewer]).void }
  def reviewers=(value); end

  sig { returns(T::Array[T.untyped]) }
  def version_ids; end

  sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
  def version_ids=(ids); end

  sig { returns(::ActiveRecord::Associations::CollectionProxy[PaperTrail::Version]) }
  def versions; end

  sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
  def versions=(value); end
end

module PullRequest::GeneratedAttributeMethods
  sig { returns(T.nilable(T.untyped)) }
  def completed_reviews; end

  sig { params(value: T.nilable(T.untyped)).returns(T.nilable(T.untyped)) }
  def completed_reviews=(value); end

  sig { returns(T::Boolean) }
  def completed_reviews?; end

  sig { returns(T.nilable(T.untyped)) }
  def completed_reviews_before_last_save; end

  sig { returns(T.untyped) }
  def completed_reviews_before_type_cast; end

  sig { returns(T::Boolean) }
  def completed_reviews_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def completed_reviews_change; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def completed_reviews_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def completed_reviews_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def completed_reviews_in_database; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def completed_reviews_previous_change; end

  sig { returns(T::Boolean) }
  def completed_reviews_previously_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def completed_reviews_previously_was; end

  sig { returns(T.nilable(T.untyped)) }
  def completed_reviews_was; end

  sig { void }
  def completed_reviews_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_before_last_save; end

  sig { returns(T.untyped) }
  def created_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def created_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def created_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_previous_change; end

  sig { returns(T::Boolean) }
  def created_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_was; end

  sig { void }
  def created_at_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { returns(T.nilable(::String)) }
  def number; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def number=(value); end

  sig { returns(T::Boolean) }
  def number?; end

  sig { returns(T.nilable(::String)) }
  def number_before_last_save; end

  sig { returns(T.untyped) }
  def number_before_type_cast; end

  sig { returns(T::Boolean) }
  def number_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def number_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def number_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def number_changed?; end

  sig { returns(T.nilable(::String)) }
  def number_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def number_previous_change; end

  sig { returns(T::Boolean) }
  def number_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def number_previously_was; end

  sig { returns(T.nilable(::String)) }
  def number_was; end

  sig { void }
  def number_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def parent_pull_request_id; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def parent_pull_request_id=(value); end

  sig { returns(T::Boolean) }
  def parent_pull_request_id?; end

  sig { returns(T.nilable(::Integer)) }
  def parent_pull_request_id_before_last_save; end

  sig { returns(T.untyped) }
  def parent_pull_request_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def parent_pull_request_id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def parent_pull_request_id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def parent_pull_request_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def parent_pull_request_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def parent_pull_request_id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def parent_pull_request_id_previous_change; end

  sig { returns(T::Boolean) }
  def parent_pull_request_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def parent_pull_request_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def parent_pull_request_id_was; end

  sig { void }
  def parent_pull_request_id_will_change!; end

  sig { returns(T.nilable(T.untyped)) }
  def pending_reviews; end

  sig { params(value: T.nilable(T.untyped)).returns(T.nilable(T.untyped)) }
  def pending_reviews=(value); end

  sig { returns(T::Boolean) }
  def pending_reviews?; end

  sig { returns(T.nilable(T.untyped)) }
  def pending_reviews_before_last_save; end

  sig { returns(T.untyped) }
  def pending_reviews_before_type_cast; end

  sig { returns(T::Boolean) }
  def pending_reviews_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def pending_reviews_change; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def pending_reviews_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def pending_reviews_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def pending_reviews_in_database; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def pending_reviews_previous_change; end

  sig { returns(T::Boolean) }
  def pending_reviews_previously_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def pending_reviews_previously_was; end

  sig { returns(T.nilable(T.untyped)) }
  def pending_reviews_was; end

  sig { void }
  def pending_reviews_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def repository_id; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def repository_id=(value); end

  sig { returns(T::Boolean) }
  def repository_id?; end

  sig { returns(T.nilable(::Integer)) }
  def repository_id_before_last_save; end

  sig { returns(T.untyped) }
  def repository_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def repository_id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def repository_id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def repository_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def repository_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def repository_id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def repository_id_previous_change; end

  sig { returns(T::Boolean) }
  def repository_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def repository_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def repository_id_was; end

  sig { void }
  def repository_id_will_change!; end

  sig { void }
  def restore_completed_reviews!; end

  sig { void }
  def restore_created_at!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_number!; end

  sig { void }
  def restore_parent_pull_request_id!; end

  sig { void }
  def restore_pending_reviews!; end

  sig { void }
  def restore_repository_id!; end

  sig { void }
  def restore_status!; end

  sig { void }
  def restore_updated_at!; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def saved_change_to_completed_reviews; end

  sig { returns(T::Boolean) }
  def saved_change_to_completed_reviews?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_created_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_created_at?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_number; end

  sig { returns(T::Boolean) }
  def saved_change_to_number?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_parent_pull_request_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_parent_pull_request_id?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def saved_change_to_pending_reviews; end

  sig { returns(T::Boolean) }
  def saved_change_to_pending_reviews?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_repository_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_repository_id?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_status; end

  sig { returns(T::Boolean) }
  def saved_change_to_status?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_updated_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_updated_at?; end

  sig { returns(T.nilable(::String)) }
  def status; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def status=(value); end

  sig { returns(T::Boolean) }
  def status?; end

  sig { returns(T.nilable(::String)) }
  def status_before_last_save; end

  sig { returns(T.untyped) }
  def status_before_type_cast; end

  sig { returns(T::Boolean) }
  def status_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def status_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def status_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def status_changed?; end

  sig { returns(T.nilable(::String)) }
  def status_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def status_previous_change; end

  sig { returns(T::Boolean) }
  def status_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def status_previously_was; end

  sig { returns(T.nilable(::String)) }
  def status_was; end

  sig { void }
  def status_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_before_last_save; end

  sig { returns(T.untyped) }
  def updated_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def updated_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def updated_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_previous_change; end

  sig { returns(T::Boolean) }
  def updated_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_was; end

  sig { void }
  def updated_at_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_completed_reviews?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_created_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_number?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_parent_pull_request_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_pending_reviews?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_repository_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_status?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_updated_at?; end
end

module PullRequest::GeneratedRelationMethods
  sig { params(args: T.untyped, blk: T.untyped).returns(T.untyped) }
  def pending_review(*args, &blk); end
end
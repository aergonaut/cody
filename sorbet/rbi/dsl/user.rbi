# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `tapioca dsl`.

# typed: strict
class User
  include User::GeneratedAssociationMethods
  include User::GeneratedAttributeMethods
end

module User::GeneratedAssociationMethods
  sig { returns(T::Array[T.untyped]) }
  def api_key_ids; end

  sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
  def api_key_ids=(ids); end

  sig { returns(::ActiveRecord::Associations::CollectionProxy[ApiKey]) }
  def api_keys; end

  sig { params(value: T::Enumerable[::ApiKey]).void }
  def api_keys=(value); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::SlackIdentity) }
  def build_slack_identity(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::UserPreference) }
  def build_user_preference(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::SlackIdentity) }
  def create_slack_identity(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::SlackIdentity) }
  def create_slack_identity!(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::UserPreference) }
  def create_user_preference(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::UserPreference) }
  def create_user_preference!(*args, &blk); end

  sig { returns(T.nilable(::SlackIdentity)) }
  def reload_slack_identity; end

  sig { returns(T.nilable(::UserPreference)) }
  def reload_user_preference; end

  sig { returns(T.nilable(::SlackIdentity)) }
  def slack_identity; end

  sig { params(value: T.nilable(::SlackIdentity)).void }
  def slack_identity=(value); end

  sig { returns(T.nilable(::UserPreference)) }
  def user_preference; end

  sig { params(value: T.nilable(::UserPreference)).void }
  def user_preference=(value); end
end

module User::GeneratedAttributeMethods
  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_before_last_save; end

  sig { returns(T.untyped) }
  def created_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def created_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def created_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_previous_change; end

  sig { returns(T::Boolean) }
  def created_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_was; end

  sig { void }
  def created_at_will_change!; end

  sig { returns(T.nilable(::String)) }
  def email; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def email=(value); end

  sig { returns(T::Boolean) }
  def email?; end

  sig { returns(T.nilable(::String)) }
  def email_before_last_save; end

  sig { returns(T.untyped) }
  def email_before_type_cast; end

  sig { returns(T::Boolean) }
  def email_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def email_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def email_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def email_changed?; end

  sig { returns(T.nilable(::String)) }
  def email_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def email_previous_change; end

  sig { returns(T::Boolean) }
  def email_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def email_previously_was; end

  sig { returns(T.nilable(::String)) }
  def email_was; end

  sig { void }
  def email_will_change!; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def encrypted_access_key=(value); end

  sig { returns(T::Boolean) }
  def encrypted_access_key?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_before_last_save; end

  sig { returns(T.untyped) }
  def encrypted_access_key_before_type_cast; end

  sig { returns(T::Boolean) }
  def encrypted_access_key_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_access_key_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_access_key_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def encrypted_access_key_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_in_database; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_iv; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def encrypted_access_key_iv=(value); end

  sig { returns(T::Boolean) }
  def encrypted_access_key_iv?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_iv_before_last_save; end

  sig { returns(T.untyped) }
  def encrypted_access_key_iv_before_type_cast; end

  sig { returns(T::Boolean) }
  def encrypted_access_key_iv_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_access_key_iv_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_access_key_iv_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def encrypted_access_key_iv_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_iv_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_access_key_iv_previous_change; end

  sig { returns(T::Boolean) }
  def encrypted_access_key_iv_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_iv_previously_was; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_iv_was; end

  sig { void }
  def encrypted_access_key_iv_will_change!; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def encrypted_access_key_previous_change; end

  sig { returns(T::Boolean) }
  def encrypted_access_key_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_previously_was; end

  sig { returns(T.nilable(::String)) }
  def encrypted_access_key_was; end

  sig { void }
  def encrypted_access_key_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { returns(T.nilable(::String)) }
  def login; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def login=(value); end

  sig { returns(T::Boolean) }
  def login?; end

  sig { returns(T.nilable(::String)) }
  def login_before_last_save; end

  sig { returns(T.untyped) }
  def login_before_type_cast; end

  sig { returns(T::Boolean) }
  def login_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def login_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def login_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def login_changed?; end

  sig { returns(T.nilable(::String)) }
  def login_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def login_previous_change; end

  sig { returns(T::Boolean) }
  def login_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def login_previously_was; end

  sig { returns(T.nilable(::String)) }
  def login_was; end

  sig { void }
  def login_will_change!; end

  sig { returns(T.nilable(::String)) }
  def name; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(::String)) }
  def name_before_last_save; end

  sig { returns(T.untyped) }
  def name_before_type_cast; end

  sig { returns(T::Boolean) }
  def name_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def name_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def name_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def name_changed?; end

  sig { returns(T.nilable(::String)) }
  def name_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def name_previous_change; end

  sig { returns(T::Boolean) }
  def name_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def name_previously_was; end

  sig { returns(T.nilable(::String)) }
  def name_was; end

  sig { void }
  def name_will_change!; end

  sig { void }
  def restore_created_at!; end

  sig { void }
  def restore_email!; end

  sig { void }
  def restore_encrypted_access_key!; end

  sig { void }
  def restore_encrypted_access_key_iv!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_login!; end

  sig { void }
  def restore_name!; end

  sig { void }
  def restore_role!; end

  sig { void }
  def restore_uid!; end

  sig { void }
  def restore_updated_at!; end

  sig { returns(T.nilable(::String)) }
  def role; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def role=(value); end

  sig { returns(T::Boolean) }
  def role?; end

  sig { returns(T.nilable(::String)) }
  def role_before_last_save; end

  sig { returns(T.untyped) }
  def role_before_type_cast; end

  sig { returns(T::Boolean) }
  def role_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def role_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def role_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def role_changed?; end

  sig { returns(T.nilable(::String)) }
  def role_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def role_previous_change; end

  sig { returns(T::Boolean) }
  def role_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def role_previously_was; end

  sig { returns(T.nilable(::String)) }
  def role_was; end

  sig { void }
  def role_will_change!; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_created_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_created_at?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_email; end

  sig { returns(T::Boolean) }
  def saved_change_to_email?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_encrypted_access_key; end

  sig { returns(T::Boolean) }
  def saved_change_to_encrypted_access_key?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_encrypted_access_key_iv; end

  sig { returns(T::Boolean) }
  def saved_change_to_encrypted_access_key_iv?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_login; end

  sig { returns(T::Boolean) }
  def saved_change_to_login?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_name; end

  sig { returns(T::Boolean) }
  def saved_change_to_name?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_role; end

  sig { returns(T::Boolean) }
  def saved_change_to_role?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_uid; end

  sig { returns(T::Boolean) }
  def saved_change_to_uid?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_updated_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_updated_at?; end

  sig { returns(T.nilable(::String)) }
  def uid; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def uid=(value); end

  sig { returns(T::Boolean) }
  def uid?; end

  sig { returns(T.nilable(::String)) }
  def uid_before_last_save; end

  sig { returns(T.untyped) }
  def uid_before_type_cast; end

  sig { returns(T::Boolean) }
  def uid_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def uid_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def uid_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def uid_changed?; end

  sig { returns(T.nilable(::String)) }
  def uid_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def uid_previous_change; end

  sig { returns(T::Boolean) }
  def uid_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def uid_previously_was; end

  sig { returns(T.nilable(::String)) }
  def uid_was; end

  sig { void }
  def uid_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_before_last_save; end

  sig { returns(T.untyped) }
  def updated_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def updated_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def updated_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_previous_change; end

  sig { returns(T::Boolean) }
  def updated_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_was; end

  sig { void }
  def updated_at_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_created_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_email?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_encrypted_access_key?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_encrypted_access_key_iv?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_login?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_name?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_role?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_uid?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_updated_at?; end
end
# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ApiKey`.
# Please instead update this file by running `tapioca dsl --gen ActiveRecordColumns ActiveRecordAssociations ActiveRecordScope`.

# typed: strict
class ApiKey
  include ApiKey::GeneratedAssociationMethods
  include ApiKey::GeneratedAttributeMethods
end

module ApiKey::GeneratedAssociationMethods
  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def build_user(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def create_user(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def create_user!(*args, &blk); end

  sig { returns(T.nilable(::User)) }
  def reload_user; end

  sig { returns(T.nilable(::User)) }
  def user; end

  sig { params(value: T.nilable(::User)).void }
  def user=(value); end
end

module ApiKey::GeneratedAttributeMethods
  sig { returns(T.nilable(T.untyped)) }
  def id; end

  sig { params(value: T.untyped).returns(T.untyped) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(T.untyped)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def id_previously_was; end

  sig { returns(T.nilable(T.untyped)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { returns(T.nilable(::String)) }
  def password_digest; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def password_digest=(value); end

  sig { returns(T::Boolean) }
  def password_digest?; end

  sig { returns(T.nilable(::String)) }
  def password_digest_before_last_save; end

  sig { returns(T.untyped) }
  def password_digest_before_type_cast; end

  sig { returns(T::Boolean) }
  def password_digest_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def password_digest_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def password_digest_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def password_digest_changed?; end

  sig { returns(T.nilable(::String)) }
  def password_digest_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def password_digest_previous_change; end

  sig { returns(T::Boolean) }
  def password_digest_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def password_digest_previously_was; end

  sig { returns(T.nilable(::String)) }
  def password_digest_was; end

  sig { void }
  def password_digest_will_change!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_password_digest!; end

  sig { void }
  def restore_user_id!; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_password_digest; end

  sig { returns(T::Boolean) }
  def saved_change_to_password_digest?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_user_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_user_id?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def user_id=(value); end

  sig { returns(T::Boolean) }
  def user_id?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_before_last_save; end

  sig { returns(T.untyped) }
  def user_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def user_id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def user_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_previous_change; end

  sig { returns(T::Boolean) }
  def user_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_was; end

  sig { void }
  def user_id_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_password_digest?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_user_id?; end
end
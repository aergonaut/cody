# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PaperTrail::Version`.
# Please instead update this file by running `tapioca dsl --gen ActiveRecordColumns ActiveRecordAssociations ActiveRecordScope`.

# typed: strict
module PaperTrail
  class Version
    include PaperTrail::Version::GeneratedAssociationMethods
    include PaperTrail::Version::GeneratedAttributeMethods
  end
end

module PaperTrail::Version::GeneratedAssociationMethods
  sig { returns(T.nilable(T.untyped)) }
  def item; end

  sig { params(value: T.nilable(T.untyped)).void }
  def item=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def reload_item; end
end

module PaperTrail::Version::GeneratedAttributeMethods
  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_before_last_save; end

  sig { returns(T.untyped) }
  def created_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def created_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def created_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_previous_change; end

  sig { returns(T::Boolean) }
  def created_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_was; end

  sig { void }
  def created_at_will_change!; end

  sig { returns(::String) }
  def event; end

  sig { params(value: ::String).returns(::String) }
  def event=(value); end

  sig { returns(T::Boolean) }
  def event?; end

  sig { returns(T.nilable(::String)) }
  def event_before_last_save; end

  sig { returns(T.untyped) }
  def event_before_type_cast; end

  sig { returns(T::Boolean) }
  def event_came_from_user?; end

  sig { returns(T.nilable([::String, ::String])) }
  def event_change; end

  sig { returns(T.nilable([::String, ::String])) }
  def event_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def event_changed?; end

  sig { returns(T.nilable(::String)) }
  def event_in_database; end

  sig { returns(T.nilable([::String, ::String])) }
  def event_previous_change; end

  sig { returns(T::Boolean) }
  def event_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def event_previously_was; end

  sig { returns(T.nilable(::String)) }
  def event_was; end

  sig { void }
  def event_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { returns(::Integer) }
  def item_id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def item_id=(value); end

  sig { returns(T::Boolean) }
  def item_id?; end

  sig { returns(T.nilable(::Integer)) }
  def item_id_before_last_save; end

  sig { returns(T.untyped) }
  def item_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def item_id_came_from_user?; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def item_id_change; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def item_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def item_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def item_id_in_database; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def item_id_previous_change; end

  sig { returns(T::Boolean) }
  def item_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def item_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def item_id_was; end

  sig { void }
  def item_id_will_change!; end

  sig { returns(::String) }
  def item_type; end

  sig { params(value: ::String).returns(::String) }
  def item_type=(value); end

  sig { returns(T::Boolean) }
  def item_type?; end

  sig { returns(T.nilable(::String)) }
  def item_type_before_last_save; end

  sig { returns(T.untyped) }
  def item_type_before_type_cast; end

  sig { returns(T::Boolean) }
  def item_type_came_from_user?; end

  sig { returns(T.nilable([::String, ::String])) }
  def item_type_change; end

  sig { returns(T.nilable([::String, ::String])) }
  def item_type_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def item_type_changed?; end

  sig { returns(T.nilable(::String)) }
  def item_type_in_database; end

  sig { returns(T.nilable([::String, ::String])) }
  def item_type_previous_change; end

  sig { returns(T::Boolean) }
  def item_type_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def item_type_previously_was; end

  sig { returns(T.nilable(::String)) }
  def item_type_was; end

  sig { void }
  def item_type_will_change!; end

  sig { returns(T.nilable(T.untyped)) }
  def object; end

  sig { params(value: T.nilable(T.untyped)).returns(T.nilable(T.untyped)) }
  def object=(value); end

  sig { returns(T::Boolean) }
  def object?; end

  sig { returns(T.nilable(T.untyped)) }
  def object_before_last_save; end

  sig { returns(T.untyped) }
  def object_before_type_cast; end

  sig { returns(T::Boolean) }
  def object_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def object_change; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def object_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def object_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def object_changes; end

  sig { params(value: T.nilable(T.untyped)).returns(T.nilable(T.untyped)) }
  def object_changes=(value); end

  sig { returns(T::Boolean) }
  def object_changes?; end

  sig { returns(T.nilable(T.untyped)) }
  def object_changes_before_last_save; end

  sig { returns(T.untyped) }
  def object_changes_before_type_cast; end

  sig { returns(T::Boolean) }
  def object_changes_came_from_user?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def object_changes_change; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def object_changes_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def object_changes_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def object_changes_in_database; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def object_changes_previous_change; end

  sig { returns(T::Boolean) }
  def object_changes_previously_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def object_changes_previously_was; end

  sig { returns(T.nilable(T.untyped)) }
  def object_changes_was; end

  sig { void }
  def object_changes_will_change!; end

  sig { returns(T.nilable(T.untyped)) }
  def object_in_database; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def object_previous_change; end

  sig { returns(T::Boolean) }
  def object_previously_changed?; end

  sig { returns(T.nilable(T.untyped)) }
  def object_previously_was; end

  sig { returns(T.nilable(T.untyped)) }
  def object_was; end

  sig { void }
  def object_will_change!; end

  sig { void }
  def restore_created_at!; end

  sig { void }
  def restore_event!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_item_id!; end

  sig { void }
  def restore_item_type!; end

  sig { void }
  def restore_object!; end

  sig { void }
  def restore_object_changes!; end

  sig { void }
  def restore_whodunnit!; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_created_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_created_at?; end

  sig { returns(T.nilable([::String, ::String])) }
  def saved_change_to_event; end

  sig { returns(T::Boolean) }
  def saved_change_to_event?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def saved_change_to_item_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_item_id?; end

  sig { returns(T.nilable([::String, ::String])) }
  def saved_change_to_item_type; end

  sig { returns(T::Boolean) }
  def saved_change_to_item_type?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def saved_change_to_object; end

  sig { returns(T::Boolean) }
  def saved_change_to_object?; end

  sig { returns(T.nilable([T.nilable(T.untyped), T.nilable(T.untyped)])) }
  def saved_change_to_object_changes; end

  sig { returns(T::Boolean) }
  def saved_change_to_object_changes?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_whodunnit; end

  sig { returns(T::Boolean) }
  def saved_change_to_whodunnit?; end

  sig { returns(T.nilable(::String)) }
  def whodunnit; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def whodunnit=(value); end

  sig { returns(T::Boolean) }
  def whodunnit?; end

  sig { returns(T.nilable(::String)) }
  def whodunnit_before_last_save; end

  sig { returns(T.untyped) }
  def whodunnit_before_type_cast; end

  sig { returns(T::Boolean) }
  def whodunnit_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def whodunnit_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def whodunnit_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def whodunnit_changed?; end

  sig { returns(T.nilable(::String)) }
  def whodunnit_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def whodunnit_previous_change; end

  sig { returns(T::Boolean) }
  def whodunnit_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def whodunnit_previously_was; end

  sig { returns(T.nilable(::String)) }
  def whodunnit_was; end

  sig { void }
  def whodunnit_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_created_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_event?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_item_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_item_type?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_object?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_object_changes?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_whodunnit?; end
end
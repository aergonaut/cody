# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Installation`.
# Please instead update this file by running `tapioca dsl`.

# typed: false
class Installation
  include Installation::GeneratedAssociationMethods
  include Installation::GeneratedAttributeMethods
end

module Installation::GeneratedAssociationMethods
  sig { returns(::ActiveRecord::Associations::CollectionProxy[Repository]) }
  def repositories; end

  sig { params(value: T::Enumerable[::Repository]).void }
  def repositories=(value); end

  sig { returns(T::Array[T.untyped]) }
  def repository_ids; end

  sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
  def repository_ids=(ids); end
end

module Installation::GeneratedAttributeMethods
  sig { returns(T.nilable(::String)) }
  def account; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def account=(value); end

  sig { returns(T::Boolean) }
  def account?; end

  sig { returns(T.nilable(::String)) }
  def account_before_last_save; end

  sig { returns(T.untyped) }
  def account_before_type_cast; end

  sig { returns(T::Boolean) }
  def account_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def account_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def account_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def account_changed?; end

  sig { returns(T.nilable(::String)) }
  def account_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def account_previous_change; end

  sig { returns(T::Boolean) }
  def account_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def account_previously_was; end

  sig { returns(T.nilable(::String)) }
  def account_was; end

  sig { void }
  def account_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_before_last_save; end

  sig { returns(T.untyped) }
  def created_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def created_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def created_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_previous_change; end

  sig { returns(T::Boolean) }
  def created_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_was; end

  sig { void }
  def created_at_will_change!; end

  sig { returns(::Integer) }
  def github_id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def github_id=(value); end

  sig { returns(T::Boolean) }
  def github_id?; end

  sig { returns(T.nilable(::Integer)) }
  def github_id_before_last_save; end

  sig { returns(T.untyped) }
  def github_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def github_id_came_from_user?; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def github_id_change; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def github_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def github_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def github_id_in_database; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def github_id_previous_change; end

  sig { returns(T::Boolean) }
  def github_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def github_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def github_id_was; end

  sig { void }
  def github_id_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { void }
  def restore_account!; end

  sig { void }
  def restore_created_at!; end

  sig { void }
  def restore_github_id!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_updated_at!; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_account; end

  sig { returns(T::Boolean) }
  def saved_change_to_account?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_created_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_created_at?; end

  sig { returns(T.nilable([::Integer, ::Integer])) }
  def saved_change_to_github_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_github_id?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_updated_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_updated_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_before_last_save; end

  sig { returns(T.untyped) }
  def updated_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def updated_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def updated_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_previous_change; end

  sig { returns(T::Boolean) }
  def updated_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_was; end

  sig { void }
  def updated_at_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_account?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_created_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_github_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_updated_at?; end
end
# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `SlackIdentity`.
# Please instead update this file by running `tapioca dsl --gen ActiveRecordColumns ActiveRecordAssociations ActiveRecordScope`.

# typed: strict
class SlackIdentity
  include SlackIdentity::GeneratedAssociationMethods
  include SlackIdentity::GeneratedAttributeMethods
end

module SlackIdentity::GeneratedAssociationMethods
  sig { params(args: T.untyped, blk: T.untyped).returns(::SlackTeam) }
  def build_slack_team(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def build_user(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::SlackTeam) }
  def create_slack_team(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::SlackTeam) }
  def create_slack_team!(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def create_user(*args, &blk); end

  sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
  def create_user!(*args, &blk); end

  sig { returns(T.nilable(::SlackTeam)) }
  def reload_slack_team; end

  sig { returns(T.nilable(::User)) }
  def reload_user; end

  sig { returns(T.nilable(::SlackTeam)) }
  def slack_team; end

  sig { params(value: T.nilable(::SlackTeam)).void }
  def slack_team=(value); end

  sig { returns(T.nilable(::User)) }
  def user; end

  sig { params(value: T.nilable(::User)).void }
  def user=(value); end
end

module SlackIdentity::GeneratedAttributeMethods
  sig { returns(T.nilable(::String)) }
  def channel; end

  sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
  def channel=(value); end

  sig { returns(T::Boolean) }
  def channel?; end

  sig { returns(T.nilable(::String)) }
  def channel_before_last_save; end

  sig { returns(T.untyped) }
  def channel_before_type_cast; end

  sig { returns(T::Boolean) }
  def channel_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def channel_change; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def channel_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def channel_changed?; end

  sig { returns(T.nilable(::String)) }
  def channel_in_database; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def channel_previous_change; end

  sig { returns(T::Boolean) }
  def channel_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def channel_previously_was; end

  sig { returns(T.nilable(::String)) }
  def channel_was; end

  sig { void }
  def channel_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_before_last_save; end

  sig { returns(T.untyped) }
  def created_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def created_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def created_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def created_at_previous_change; end

  sig { returns(T::Boolean) }
  def created_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def created_at_was; end

  sig { void }
  def created_at_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def id; end

  sig { params(value: ::Integer).returns(::Integer) }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(::Integer)) }
  def id_before_last_save; end

  sig { returns(T.untyped) }
  def id_before_type_cast; end

  sig { returns(T::Boolean) }
  def id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def id_previous_change; end

  sig { returns(T::Boolean) }
  def id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def id_was; end

  sig { void }
  def id_will_change!; end

  sig { void }
  def restore_channel!; end

  sig { void }
  def restore_created_at!; end

  sig { void }
  def restore_id!; end

  sig { void }
  def restore_slack_team_id!; end

  sig { void }
  def restore_uid!; end

  sig { void }
  def restore_updated_at!; end

  sig { void }
  def restore_user_id!; end

  sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
  def saved_change_to_channel; end

  sig { returns(T::Boolean) }
  def saved_change_to_channel?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_created_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_created_at?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_id?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_slack_team_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_slack_team_id?; end

  sig { returns(T.nilable([::String, ::String])) }
  def saved_change_to_uid; end

  sig { returns(T::Boolean) }
  def saved_change_to_uid?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def saved_change_to_updated_at; end

  sig { returns(T::Boolean) }
  def saved_change_to_updated_at?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def saved_change_to_user_id; end

  sig { returns(T::Boolean) }
  def saved_change_to_user_id?; end

  sig { returns(T.nilable(::Integer)) }
  def slack_team_id; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def slack_team_id=(value); end

  sig { returns(T::Boolean) }
  def slack_team_id?; end

  sig { returns(T.nilable(::Integer)) }
  def slack_team_id_before_last_save; end

  sig { returns(T.untyped) }
  def slack_team_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def slack_team_id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def slack_team_id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def slack_team_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def slack_team_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def slack_team_id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def slack_team_id_previous_change; end

  sig { returns(T::Boolean) }
  def slack_team_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def slack_team_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def slack_team_id_was; end

  sig { void }
  def slack_team_id_will_change!; end

  sig { returns(::String) }
  def uid; end

  sig { params(value: ::String).returns(::String) }
  def uid=(value); end

  sig { returns(T::Boolean) }
  def uid?; end

  sig { returns(T.nilable(::String)) }
  def uid_before_last_save; end

  sig { returns(T.untyped) }
  def uid_before_type_cast; end

  sig { returns(T::Boolean) }
  def uid_came_from_user?; end

  sig { returns(T.nilable([::String, ::String])) }
  def uid_change; end

  sig { returns(T.nilable([::String, ::String])) }
  def uid_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def uid_changed?; end

  sig { returns(T.nilable(::String)) }
  def uid_in_database; end

  sig { returns(T.nilable([::String, ::String])) }
  def uid_previous_change; end

  sig { returns(T::Boolean) }
  def uid_previously_changed?; end

  sig { returns(T.nilable(::String)) }
  def uid_previously_was; end

  sig { returns(T.nilable(::String)) }
  def uid_was; end

  sig { void }
  def uid_will_change!; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at; end

  sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_before_last_save; end

  sig { returns(T.untyped) }
  def updated_at_before_type_cast; end

  sig { returns(T::Boolean) }
  def updated_at_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def updated_at_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_in_database; end

  sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
  def updated_at_previous_change; end

  sig { returns(T::Boolean) }
  def updated_at_previously_changed?; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_previously_was; end

  sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
  def updated_at_was; end

  sig { void }
  def updated_at_will_change!; end

  sig { returns(T.nilable(::Integer)) }
  def user_id; end

  sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
  def user_id=(value); end

  sig { returns(T::Boolean) }
  def user_id?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_before_last_save; end

  sig { returns(T.untyped) }
  def user_id_before_type_cast; end

  sig { returns(T::Boolean) }
  def user_id_came_from_user?; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_change; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_change_to_be_saved; end

  sig { returns(T::Boolean) }
  def user_id_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_in_database; end

  sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
  def user_id_previous_change; end

  sig { returns(T::Boolean) }
  def user_id_previously_changed?; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_previously_was; end

  sig { returns(T.nilable(::Integer)) }
  def user_id_was; end

  sig { void }
  def user_id_will_change!; end

  sig { returns(T::Boolean) }
  def will_save_change_to_channel?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_created_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_slack_team_id?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_uid?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_updated_at?; end

  sig { returns(T::Boolean) }
  def will_save_change_to_user_id?; end
end
# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-sidekiq` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module Sentry
  class << self
    def add_breadcrumb(breadcrumb, &block); end
    def capture_event(event); end
    def capture_exception(exception, **options, &block); end
    def capture_message(message, **options, &block); end
    def clone_hub_to_current_thread; end
    def configuration; end
    def configure_scope(&block); end
    def get_current_client; end
    def get_current_hub; end
    def get_current_scope; end
    def get_main_hub; end
    def init(&block); end
    def last_event_id; end
    def logger; end
    def sdk_meta; end
    def send_event(event); end
    def set_extras(*args, &block); end
    def set_tags(*args, &block); end
    def set_user(*args, &block); end
    def start_transaction(**options); end
    def sys_command(command); end
    def utc_now; end
    def with_scope(&block); end
  end
end

Sentry::LOGGER_PROGNAME = T.let(T.unsafe(nil), String)

Sentry::META = T.let(T.unsafe(nil), Hash)

module Sentry::Sidekiq
end

class Sentry::Sidekiq::CleanupMiddleware
  def call(_worker, job, queue); end
end

class Sentry::Sidekiq::ContextFilter
  def initialize; end

  def filter_context(context); end

  private

  def filter_context_hash(key, value); end
  def has_global_id?; end
end

Sentry::Sidekiq::ContextFilter::ACTIVEJOB_RESERVED_PREFIX_REGEX = T.let(T.unsafe(nil), Regexp)

class Sentry::Sidekiq::ErrorHandler
  def call(ex, context); end

  private

  def transaction_from_context(context); end
end

Sentry::Sidekiq::ErrorHandler::SIDEKIQ_NAME = T.let(T.unsafe(nil), String)

Sentry::Sidekiq::META = T.let(T.unsafe(nil), Hash)

Sentry::Sidekiq::VERSION = T.let(T.unsafe(nil), String)

Sentry::THREAD_LOCAL = T.let(T.unsafe(nil), Symbol)

Sentry::VERSION = T.let(T.unsafe(nil), String)

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-statistics` gem.
# Please instead update this file by running `tapioca sync`.

# typed: strict

Distribution = Statistics::Distribution

module Enumerable
  def mean; end
  def standard_deviation; end
  def variance; end
end

StatisticalTest = Statistics::StatisticalTest

module Statistics
end

module Statistics::Distribution
end

class Statistics::Distribution::Bernoulli
  class << self
    def cumulative_function(n, p); end
    def density_function(n, p); end
    def kurtosis(p); end
    def skewness(p); end
    def variance(p); end
  end
end

class Statistics::Distribution::Beta
  def initialize(alp, bet); end

  def alpha; end
  def alpha=(_arg0); end
  def beta; end
  def beta=(_arg0); end
  def cumulative_function(value); end
  def density_function(value); end
  def mean; end
  def mode; end
end

class Statistics::Distribution::Binomial
  def initialize(n, p); end

  def cumulative_function(k); end
  def mean; end
  def mode; end
  def number_of_trials; end
  def number_of_trials=(_arg0); end
  def probability_mass_function(k); end
  def probability_per_trial; end
  def probability_per_trial=(_arg0); end
  def variance; end
end

class Statistics::Distribution::ChiSquared
  def initialize(k); end

  def cumulative_function(value); end
  def degrees_of_freedom; end
  def degrees_of_freedom=(_arg0); end
  def density_function(value); end
  def mean; end
  def mode; end
  def variance; end
end

class Statistics::Distribution::Empirical
  def initialize(samples:); end

  def cumulative_function(x:); end
  def samples; end
  def samples=(_arg0); end
end

class Statistics::Distribution::F
  def initialize(k, j); end

  def cumulative_function(value); end
  def d1; end
  def d1=(_arg0); end
  def d2; end
  def d2=(_arg0); end
  def density_function(value); end
  def mean; end
  def mode; end
end

class Statistics::Distribution::Geometric
  def initialize(p, always_success: T.unsafe(nil)); end

  def always_success_allowed; end
  def always_success_allowed=(_arg0); end
  def cumulative_function(k); end
  def density_function(k); end
  def kurtosis; end
  def mean; end
  def median; end
  def mode; end
  def probability_of_success; end
  def probability_of_success=(_arg0); end
  def skewness; end
  def variance; end
end

class Statistics::Distribution::InverseStandardNormal < ::Statistics::Distribution::StandardNormal
  def cumulative_function(value); end
  def density_function(_); end
  def random(elements: T.unsafe(nil), seed: T.unsafe(nil)); end
end

Statistics::Distribution::InverseStandardNormal::A1 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::A2 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::A3 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::A4 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::A5 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::A6 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::B1 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::B2 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::B3 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::B4 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::B5 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::C1 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::C2 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::C3 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::C4 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::C5 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::C6 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::D1 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::D2 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::D3 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::D4 = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::P_HIGH = T.let(T.unsafe(nil), Float)

Statistics::Distribution::InverseStandardNormal::P_LOW = T.let(T.unsafe(nil), Float)

class Statistics::Distribution::LogSeries
  class << self
    def cumulative_function(k, p); end
    def density_function(k, p); end
    def mean(p); end
    def mode; end
    def variance(p); end
  end
end

class Statistics::Distribution::NegativeBinomial
  def initialize(r, p); end

  def cumulative_function(k); end
  def mean; end
  def mode; end
  def number_of_failures; end
  def number_of_failures=(_arg0); end
  def probability_mass_function(k); end
  def probability_per_trial; end
  def probability_per_trial=(_arg0); end
  def skewness; end
  def variance; end
end

class Statistics::Distribution::Normal
  def initialize(avg, std); end

  def cumulative_function(value); end
  def density_function(value); end
  def mean; end
  def mean=(_arg0); end
  def mode; end
  def random(elements: T.unsafe(nil), seed: T.unsafe(nil)); end
  def standard_deviation; end
  def standard_deviation=(_arg0); end
  def variance; end
  def variance=(_arg0); end
end

class Statistics::Distribution::Poisson
  def initialize(l); end

  def cumulative_function(k); end
  def expected_number_of_occurrences; end
  def expected_number_of_occurrences=(_arg0); end
  def mean; end
  def probability_mass_function(k); end
  def variance; end
end

class Statistics::Distribution::StandardNormal < ::Statistics::Distribution::Normal
  def initialize; end

  def density_function(value); end
end

class Statistics::Distribution::TStudent
  def initialize(v); end

  def cumulative_function(value); end
  def degrees_of_freedom; end
  def degrees_of_freedom=(_arg0); end
  def density_function(value); end
  def mean; end
  def mode; end
  def random(elements: T.unsafe(nil), seed: T.unsafe(nil)); end
  def variance; end
end

class Statistics::Distribution::Uniform
  def initialize(a, b); end

  def cumulative_function(value); end
  def density_function(value); end
  def left; end
  def left=(_arg0); end
  def mean; end
  def median; end
  def right; end
  def right=(_arg0); end
  def variance; end
end

class Statistics::Distribution::Weibull
  def initialize(k, lamb); end

  def cumulative_function(random_value); end
  def density_function(value); end
  def mean; end
  def mode; end
  def random(elements: T.unsafe(nil), seed: T.unsafe(nil)); end
  def scale; end
  def scale=(_arg0); end
  def shape; end
  def shape=(_arg0); end
  def variance; end
end

class Statistics::SpearmanRankCoefficient
  class << self
    def coefficient(set_one, set_two); end
    def rank(data:, return_ranks_only: T.unsafe(nil)); end
  end
end

module Statistics::StatisticalTest
end

class Statistics::StatisticalTest::ChiSquaredTest
  class << self
    def chi_statistic(expected, observed); end
    def goodness_of_fit(alpha, expected, observed); end
  end
end

class Statistics::StatisticalTest::FTest
  class << self
    def anova_f_score(*args); end
    def one_way_anova(alpha, *args); end
  end
end

Statistics::StatisticalTest::KSTest = Statistics::StatisticalTest::KolmogorovSmirnovTest

class Statistics::StatisticalTest::KolmogorovSmirnovTest
  class << self
    def two_samples(group_one:, group_two:, alpha: T.unsafe(nil)); end
  end
end

Statistics::StatisticalTest::MannWhitneyU = Statistics::StatisticalTest::WilcoxonRankSumTest

class Statistics::StatisticalTest::TTest
  class << self
    def paired_test(alpha, tails, left_group, right_group); end
    def perform(alpha, tails, *args); end
  end
end

class Statistics::StatisticalTest::TTest::ZeroStdError < ::StandardError
end

Statistics::StatisticalTest::TTest::ZeroStdError::STD_ERROR_MSG = T.let(T.unsafe(nil), String)

class Statistics::StatisticalTest::WilcoxonRankSumTest
  def perform(alpha, tails, group_one, group_two); end
  def rank(elements); end

  private

  def corrected_sigma(ties, total_group_one, total_group_two); end
  def ranked_sum_for(total, group); end
end

Statistics::VERSION = T.let(T.unsafe(nil), String)

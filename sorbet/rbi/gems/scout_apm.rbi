# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/scout_apm/all/scout_apm.rbi
#
# scout_apm-2.4.20
class Struct::RUsage < Struct
  def idrss; end
  def idrss=(_); end
  def inblock; end
  def inblock=(_); end
  def isrss; end
  def isrss=(_); end
  def ixrss; end
  def ixrss=(_); end
  def majflt; end
  def majflt=(_); end
  def maxrss; end
  def maxrss=(_); end
  def minflt; end
  def minflt=(_); end
  def msgrcv; end
  def msgrcv=(_); end
  def msgsnd; end
  def msgsnd=(_); end
  def nivcsw; end
  def nivcsw=(_); end
  def nsignals; end
  def nsignals=(_); end
  def nswap; end
  def nswap=(_); end
  def nvcsw; end
  def nvcsw=(_); end
  def oublock; end
  def oublock=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def stime; end
  def stime=(_); end
  def utime; end
  def utime=(_); end
end
module Process
  def crusage(*arg0); end
  def rusage(*arg0); end
  def self.crusage(*arg0); end
  def self.rusage(*arg0); end
end
module ScoutApm
end
class ScoutApm::Debug
  def call_periodic_hooks; end
  def initialize; end
  def logger; end
  def register_periodic_hook(&hook); end
  def self.instance; end
end
class ScoutApm::TrackedRequest
  def acknowledge_children!; end
  def annotate_request(hsh); end
  def annotations; end
  def apply_name_override; end
  def backtrace_threshold; end
  def call_counts; end
  def call_counts=(arg0); end
  def capture_backtrace?(layer); end
  def capture_mem_delta!; end
  def context; end
  def current_layer; end
  def ensure_background_worker; end
  def error!; end
  def error?; end
  def finalized?; end
  def headers; end
  def ignore_children!; end
  def ignore_request!; end
  def ignoring_children?; end
  def ignoring_recorded?; end
  def ignoring_request?; end
  def ignoring_start_layer; end
  def ignoring_stop_layer; end
  def initialize(agent_context, store); end
  def instant?; end
  def instant_key; end
  def instant_key=(arg0); end
  def job?; end
  def layer_finder; end
  def logger; end
  def mem_usage; end
  def name_override; end
  def name_override=(arg0); end
  def prepare_to_dump!; end
  def real_request!; end
  def real_request?; end
  def record!; end
  def recorded!; end
  def recorded?; end
  def recorder; end
  def restore_from_dump!; end
  def root_layer; end
  def set_headers(headers); end
  def start_layer(layer); end
  def start_request(layer); end
  def stop_layer; end
  def stop_request; end
  def stopping?; end
  def unique_name; end
  def update_call_counts!(layer); end
  def web?; end
end
class ScoutApm::Layer
  def add_child(child); end
  def annotate_layer(hsh); end
  def annotations; end
  def backtrace; end
  def caller_array; end
  def capture_backtrace!; end
  def child_allocations; end
  def child_time; end
  def children; end
  def desc; end
  def desc=(desc); end
  def initialize(type, name, start_time = nil); end
  def legacy_metric_name; end
  def limited?; end
  def name; end
  def name=(arg0); end
  def record_allocations!; end
  def record_stop_time!(stop_time = nil); end
  def start_time; end
  def stop_time; end
  def subscopable!; end
  def subscopable?; end
  def to_s; end
  def total_allocations; end
  def total_call_time; end
  def total_exclusive_allocations; end
  def total_exclusive_time; end
  def type; end
end
class ScoutApm::LimitedLayer
  def absorb(layer); end
  def add_child; end
  def annotate_layer(*arg0); end
  def annotations; end
  def backtrace; end
  def caller_array; end
  def capture_backtrace!; end
  def children; end
  def count; end
  def desc; end
  def desc=(*arg0); end
  def initialize(type); end
  def legacy_metric_name; end
  def limited?; end
  def record_allocations!; end
  def record_stop_time!(*arg0); end
  def subscopable!; end
  def subscopable?; end
  def to_s; end
  def total_allocations; end
  def total_call_time; end
  def total_exclusive_allocations; end
  def total_exclusive_time; end
  def type; end
end
class ScoutApm::LayerChildrenSet
  def <<(child); end
  def child_set(metric_type); end
  def children; end
  def each; end
  def init_limited_layers; end
  def initialize(unique_cutoff = nil); end
  def length; end
  def size; end
  def unique_cutoff; end
  include Enumerable
end
class ScoutApm::RequestManager
  def self.create; end
  def self.find; end
  def self.lookup; end
end
class ScoutApm::CallSet
  def at_magic_number?; end
  def call_count; end
  def capture_backtrace?; end
  def grouped_items; end
  def initialize; end
  def past_time_threshold?; end
  def unique_name_for(item); end
  def update!(item = nil); end
end
module ScoutApm::LayerConverters
end
class ScoutApm::LayerConverters::ConverterBase
  def attach_backtraces(metric_hash); end
  def context; end
  def initialize(context, request, layer_finder, store = nil); end
  def layer_finder; end
  def limited?; end
  def make_meta_options(layer); end
  def make_meta_options_desc_hash(layer, max_desc_length = nil); end
  def make_meta_options_scope(layer); end
  def over_metric_limit?(metric_hash); end
  def register_hooks(walker); end
  def request; end
  def root_layer; end
  def scope_layer; end
  def skip_layer?(layer); end
  def store_aggregate_metric(layer, metric_hash, allocation_metric_hash); end
  def store_backtrace(layer, meta); end
  def store_specific_metric(layer, metric_hash, allocation_metric_hash); end
  def subscope_name; end
  def subscoped?(layer); end
end
class ScoutApm::LayerConverters::DepthFirstWalker
  def after(&block); end
  def before(&block); end
  def initialize(root_layer); end
  def on(&block); end
  def root_layer; end
  def walk(layer = nil); end
end
class ScoutApm::LayerConverters::ErrorConverter < ScoutApm::LayerConverters::ConverterBase
  def record!; end
end
class ScoutApm::LayerConverters::JobConverter < ScoutApm::LayerConverters::ConverterBase
  def add_latency_metric!; end
  def meta_options; end
  def record!; end
  def register_hooks(walker); end
end
class ScoutApm::LayerConverters::SlowJobConverter < ScoutApm::LayerConverters::ConverterBase
  def call; end
  def create_metrics; end
  def job_layer; end
  def name; end
  def queue_layer; end
  def record!; end
  def score; end
  def skip_layer?(layer); end
end
class ScoutApm::LayerConverters::MetricConverter < ScoutApm::LayerConverters::ConverterBase
  def record!; end
  def register_hooks(walker); end
end
class ScoutApm::LayerConverters::DatabaseConverter < ScoutApm::LayerConverters::ConverterBase
  def initialize(*arg0); end
  def model_name(layer); end
  def operation_name(layer); end
  def record!; end
  def records_returned(layer); end
  def register_hooks(walker); end
  def skip_layer?(layer); end
end
class ScoutApm::LayerConverters::SlowRequestConverter < ScoutApm::LayerConverters::ConverterBase
  def call; end
  def create_metrics; end
  def name; end
  def record!; end
  def score; end
end
class ScoutApm::LayerConverters::RequestQueueTimeConverter < ScoutApm::LayerConverters::ConverterBase
  def headers; end
  def locate_timestamp; end
  def parse(time_string); end
  def record!; end
end
class ScoutApm::LayerConverters::AllocationMetricConverter < ScoutApm::LayerConverters::ConverterBase
  def record!; end
end
class ScoutApm::LayerConverters::Histograms < ScoutApm::LayerConverters::ConverterBase
  def record!; end
end
class ScoutApm::LayerConverters::FindLayerByType
  def call(layer_types); end
  def controller; end
  def initialize(request); end
  def job; end
  def queue; end
  def scope; end
end
module ScoutApm::ServerIntegrations
end
class ScoutApm::ServerIntegrations::Passenger
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::ServerIntegrations::Puma
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::ServerIntegrations::Rainbows
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::ServerIntegrations::Thin
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::ServerIntegrations::Unicorn
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::ServerIntegrations::Webrick
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::ServerIntegrations::Null
  def forking?; end
  def found?; end
  def initialize(logger); end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
module ScoutApm::BackgroundJobIntegrations
end
class ScoutApm::BackgroundJobIntegrations::Sidekiq
  def add_middleware; end
  def forking?; end
  def install; end
  def install_processor; end
  def install_tracer; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::BackgroundJobIntegrations::SidekiqMiddleware
  def call(_worker, msg, queue); end
  def job_class(msg); end
  def latency(msg, time = nil); end
end
class ScoutApm::BackgroundJobIntegrations::DelayedJob
  def forking?; end
  def install; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::BackgroundJobIntegrations::Resque
  def bind; end
  def config; end
  def forking?; end
  def inject_job_instrument; end
  def install; end
  def install_after_fork; end
  def install_before_fork; end
  def name; end
  def port; end
  def present?; end
end
class ScoutApm::BackgroundJobIntegrations::Shoryuken
  def add_middleware; end
  def forking?; end
  def install; end
  def install_processor; end
  def install_tracer; end
  def logger; end
  def name; end
  def present?; end
end
class ScoutApm::BackgroundJobIntegrations::ShoryukenMiddleware
  def call(worker_instance, queue, msg, body); end
  def latency(msg, time = nil); end
end
class ScoutApm::BackgroundJobIntegrations::Sneakers
  def forking?; end
  def install; end
  def install_worker_override; end
  def logger; end
  def name; end
  def present?; end
end
module ScoutApm::FrameworkIntegrations
end
class ScoutApm::FrameworkIntegrations::Rails2
  def application_name; end
  def database_engine; end
  def env; end
  def human_name; end
  def name; end
  def present?; end
  def raw_database_adapter; end
  def version; end
end
class ScoutApm::FrameworkIntegrations::Rails3Or4
  def application_name; end
  def database_engine; end
  def env; end
  def human_name; end
  def name; end
  def present?; end
  def raw_database_adapter; end
  def version; end
end
class ScoutApm::FrameworkIntegrations::Sinatra
  def application_name; end
  def database_engine; end
  def env; end
  def human_name; end
  def name; end
  def present?; end
  def raw_database_adapter; end
  def version; end
end
class ScoutApm::FrameworkIntegrations::Ruby
  def application_name; end
  def database_engine; end
  def env; end
  def human_name; end
  def name; end
  def present?; end
  def raw_database_adapter; end
  def version; end
end
module ScoutApm::PlatformIntegrations
end
class ScoutApm::PlatformIntegrations::Heroku
  def hostname; end
  def log_to_stdout?; end
  def name; end
  def present?; end
end
class ScoutApm::PlatformIntegrations::CloudFoundry
  def hostname; end
  def log_to_stdout?; end
  def name; end
  def present?; end
end
class ScoutApm::PlatformIntegrations::Server
  def hostname; end
  def log_to_stdout?; end
  def name; end
  def present?; end
end
class ScoutApm::HistogramBin < Struct
  def count; end
  def count=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
class ScoutApm::NumericHistogram
  def add(new_value); end
  def approximate_quantile_of_value(v); end
  def as_json; end
  def bins; end
  def combine!(other); end
  def create_new_bin(new_value); end
  def initialize(max_bins); end
  def marshal_dump; end
  def marshal_load(array); end
  def max_bins; end
  def mean; end
  def mutex; end
  def quantile(q); end
  def total; end
  def total=(arg0); end
  def trim; end
  def trim_one; end
end
module ScoutApm::Instruments
end
class ScoutApm::Instruments::NetHttp
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::HttpClient
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::Moped
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::Mongoid
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
  def mongoid_v5?; end
  def mongoid_v6?; end
  def self.anonymize_filter(filter); end
end
class ScoutApm::Instruments::Redis
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::InfluxDB
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::Elasticsearch
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Environment
  def app_server; end
  def app_server_integration(force = nil); end
  def application_name; end
  def background_job_integrations; end
  def database_engine; end
  def env; end
  def forking?; end
  def framework; end
  def framework_integration; end
  def framework_root; end
  def git_revision; end
  def hostname; end
  def interactive?; end
  def jruby?; end
  def os; end
  def platform_integration; end
  def processors; end
  def raw_database_adapter; end
  def root; end
  def rubinius?; end
  def ruby_187?; end
  def ruby_19?; end
  def ruby_2?; end
  def scm_subdirectory; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def sinatra?; end
  def supports_module_prepend?; end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module ScoutApm::Utils
end
module ScoutApm::Utils::SqlRegex
end
class ScoutApm::Utils::SqlSanitizer
  def database_engine; end
  def database_engine=(arg0); end
  def has_encodings?(encodings = nil); end
  def initialize(sql); end
  def scrubbed(str); end
  def sql; end
  def to_s; end
  def to_s_mysql; end
  def to_s_postgres; end
  def to_s_sqlite; end
  include ScoutApm::Utils::SqlRegex
end
class ScoutApm::SqlList
  def <<(sql); end
  def initialize(sql = nil); end
  def merge(other); end
  def push(sql); end
  def sqls; end
  def to_s; end
end
class ScoutApm::Instruments::ActiveRecord
  def add_instruments; end
  def context; end
  def initialize(context); end
  def install; end
  def install_via_after_initialize?; end
  def installed?; end
  def logger; end
end
module ScoutApm::Instruments::ActiveRecordInstruments
  def log_with_scout_instruments(*args, &block); end
  def self.included(instrumented_class); end
end
module ScoutApm::Instruments::ActiveRecordQueryingInstruments
  def find_by_sql_with_scout_instruments(*args, &block); end
  def self.included(instrumented_class); end
end
module ScoutApm::Instruments::ActiveRecordFinderMethodsInstruments
  def find_with_associations_with_scout_instruments(*args, &block); end
  def self.included(instrumented_class); end
end
module ScoutApm::Instruments::ActiveRecordRelationQueryInstruments
  def exec_queries(*args, &block); end
  def self.included(instrumented_class); end
  def self.prepended(instrumented_class); end
end
module ScoutApm::Instruments::ActiveRecordUpdateInstruments
  def save!(*args, &block); end
  def save(*args, &block); end
end
module ScoutApm::Instruments::ActiveRecordRelationInstruments
  def delete_all_with_scout_instruments(*args, &block); end
  def destroy_all_with_scout_instruments(*args, &block); end
  def self.included(instrumented_class); end
  def update_all_with_scout_instruments(*args, &block); end
end
class ScoutApm::Instruments::ActionControllerRails2
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
module ScoutApm::Instruments::ActionControllerRails2Instruments
  def perform_action_with_scout_instruments(*args, &block); end
  def self.included(instrumented_class); end
end
class ScoutApm::Instruments::ActionControllerRails3Rails4
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
  def self.build_instrument_module; end
  def self.scout_transaction_uri(request, config = nil); end
end
module ScoutApm::Instruments::ActionControllerMetalInstruments
  def scout_action_name(*args); end
  include Anonymous_Module_31
end
module Anonymous_Module_31
  def process_action(*args); end
end
module ScoutApm::Instruments::ActionControllerRails3Rails4Instruments
end
module ScoutApm::Instruments::ActionControllerBaseInstruments
  def scout_action_name(*args); end
  include Anonymous_Module_32
end
module Anonymous_Module_32
  def process_action(*args); end
end
module ScoutApm::Instruments::ActionControllerAPIInstruments
  def scout_action_name(*args); end
  include Anonymous_Module_33
end
module Anonymous_Module_33
  def process_action(*args); end
end
class ScoutApm::Instruments::ActionView
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::MiddlewareSummary
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::MiddlewareSummary::MiddlewareSummaryWrapper
  def call(env); end
  def initialize(app); end
  def method_missing(sym, *arguments, &block); end
  def respond_to?(sym, include_private = nil); end
end
class ScoutApm::Instruments::MiddlewareDetailed
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::MiddlewareDetailed::MiddlewareWrapper
  def call(env); end
  def initialize(app, name); end
end
class ScoutApm::Instruments::RailsRouter
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
class ScoutApm::Instruments::Grape
  def context; end
  def initialize(context); end
  def install; end
  def installed?; end
  def logger; end
end
module ScoutApm::Instruments::GrapeEndpointInstruments
  def run_with_scout_instruments(*args); end
end
class ScoutApm::Instruments::Sinatra
  def initalize(logger = nil); end
  def install; end
  def installed?; end
  def logger; end
end
module ScoutApm::Instruments::SinatraInstruments
  def dispatch_with_scout_instruments!; end
  def scout_sinatra_controller_name(request); end
end
class ScoutApm::Instruments::Allocations
  def self.count; end
end
module ScoutApm::Instruments::Process
end
class ScoutApm::Instruments::Process::ProcessCpu
  def context; end
  def human_name; end
  def initialize(context); end
  def last_run; end
  def last_run=(arg0); end
  def last_stime; end
  def last_stime=(arg0); end
  def last_utime; end
  def last_utime=(arg0); end
  def logger; end
  def metric_name; end
  def metric_type; end
  def metrics(timestamp, store); end
  def num_processors; end
  def run; end
  def save_times(now, utime, stime); end
end
class ScoutApm::Instruments::Process::ProcessMemory
  def human_name; end
  def initialize(context); end
  def logger; end
  def metric_name; end
  def metric_type; end
  def metrics(timestamp, store); end
  def rss; end
  def rss_in_mb; end
  def rss_to_mb(rss); end
  def run; end
end
class ScoutApm::Instruments::HistogramReport
  def combine!(other); end
  def histogram; end
  def initialize(name, histogram); end
  def name; end
end
class ScoutApm::Instruments::PercentileSampler
  def histograms; end
  def human_name; end
  def initialize(context); end
  def logger; end
  def metrics(timestamp, store); end
  def percentiles(time); end
end
class ScoutApm::Instruments::Samplers
end
class ScoutApm::AppServerLoad
  def context; end
  def data; end
  def environment; end
  def initialize(context); end
  def logger; end
  def run; end
  def to_s_safe(obj); end
end
class ScoutApm::IgnoredUris
  def ignore?(uri); end
  def initialize(prefixes); end
  def regex; end
end
class ScoutApm::Utils::ActiveRecordMetricName
  def ==(o); end
  def eql?(o); end
  def hash; end
  def initialize(sql, name); end
  def model; end
  def name; end
  def normalized_operation; end
  def operation; end
  def parse_operation; end
  def parts; end
  def regex_name(sql); end
  def sql; end
  def to_s; end
end
class ScoutApm::Utils::BacktraceParser
  def call; end
  def call_stack; end
  def initialize(call_stack, root = nil); end
end
class ScoutApm::Utils::InstalledGems
  def context; end
  def initialize(context); end
  def logger; end
  def run; end
end
module ScoutApm::Utils::KlassHelper
  def self.defined?(*names); end
  def self.lookup(*names); end
end
class ScoutApm::Utils::Scm
  def self.relative_scm_path(path, scm_subdirectory = nil); end
end
class ScoutApm::Utils::Time
  def self.to_s(time); end
end
class ScoutApm::Utils::UniqueId
  def self.simple(length = nil); end
end
class ScoutApm::Utils::Numbers
  def self.round(number, decimals); end
end
class ScoutApm::Utils::GzipHelper
  def deflate(str); end
  def initialize(level = nil); end
  def level; end
end
class ScoutApm::Config
  def all_settings; end
  def any_keys_found?; end
  def initialize(context, overlays); end
  def log_settings(logger); end
  def logger; end
  def overlay_for_key(key); end
  def self.with_file(context, file_path = nil, config = nil); end
  def self.without_file(context); end
  def value(key); end
end
class ScoutApm::Config::BooleanCoercion
  def coerce(val); end
  def coerce_string(val); end
end
class ScoutApm::Config::JsonCoercion
  def coerce(val); end
end
class ScoutApm::Config::IntegerCoercion
  def coerce(val); end
end
class ScoutApm::Config::NullCoercion
  def coerce(val); end
end
class ScoutApm::Config::ConfigDefaults
  def any_keys_found?; end
  def has_key?(key); end
  def name; end
  def value(key); end
end
class ScoutApm::Config::ConfigNull
  def any_keys_found?; end
  def has_key?(*arg0); end
  def name; end
  def value(*arg0); end
end
class ScoutApm::Config::ConfigEnvironment
  def any_keys_found?; end
  def has_key?(key); end
  def key_to_env_key(key); end
  def name; end
  def value(key); end
end
class ScoutApm::Config::ConfigFile
  def any_keys_found?; end
  def app_environment; end
  def context; end
  def determine_file_path; end
  def has_key?(key); end
  def initialize(context, file_path = nil, config = nil); end
  def load_file(file); end
  def logger; end
  def name; end
  def value(key); end
end
class ScoutApm::Agent
  def background_worker_running?; end
  def context; end
  def force?; end
  def initialize(options = nil); end
  def install(force = nil); end
  def install_app_server_integration; end
  def install_background_job_integrations; end
  def instrument_manager; end
  def log_environment; end
  def logger; end
  def options; end
  def options=(arg0); end
  def self.instance(options = nil); end
  def should_load_instruments?; end
  def start(opts = nil); end
  def start_background_worker(quiet = nil); end
  def start_background_worker?; end
  def stop_background_worker; end
end
class ScoutApm::Logger
  def build_formatter; end
  def build_logger; end
  def debug(*args, &block); end
  def debug?; end
  def determine_log_destination; end
  def error(*args, &block); end
  def error?; end
  def fatal(*args, &block); end
  def fatal?; end
  def info(*args, &block); end
  def info?; end
  def initialize(environment_root, opts = nil); end
  def log_destination; end
  def log_file_path; end
  def log_level; end
  def log_level=(level); end
  def log_level_from_opts(explicit = nil); end
  def logger_class; end
  def stderr?; end
  def stdout?; end
  def validate_path(candidate); end
  def warn(*args, &block); end
  def warn?; end
end
class ScoutApm::Logger::DefaultFormatter < Logger::Formatter
  def call(severity, time, progname, msg); end
end
class ScoutApm::Logger::TaggedFormatter < ScoutApm::Logger::DefaultFormatter
  def call(severity, time, progname, msg); end
end
class ScoutApm::Reporting
  def add_metric_ids(metrics); end
  def context; end
  def deliver_period(reporting_period, metadata); end
  def headers; end
  def initialize(context); end
  def log_deliver(metrics, slow_transactions, metadata, jobs_traces, histograms); end
  def logger; end
  def metadata(reporting_period); end
  def process_metrics; end
  def report_to_server; end
  def reporter; end
end
class ScoutApm::Layaway
  def all_files_for(timestamp); end
  def at_layaway_file_limit?(files_limit = nil); end
  def context; end
  def delete_files_for(timestamp); end
  def delete_stale_files(older_than); end
  def directory; end
  def file_for(timestamp); end
  def format_pid(pid); end
  def format_timestamp(timestamp); end
  def glob_pattern(timestamp, pid = nil); end
  def initialize(context); end
  def log_layaway_file_information; end
  def logger; end
  def timestamp_from_filename(filename); end
  def with_claim(timestamp); end
  def write_reporting_period(reporting_period, files_limit = nil); end
end
class ScoutApm::LayawayFile
  def context; end
  def deserialize(data); end
  def initialize(context, path); end
  def load; end
  def logger; end
  def path; end
  def read_raw(f); end
  def serialize(data); end
  def write(data); end
  def write_raw(f, data); end
end
class ScoutApm::Reporter
  def can_report?; end
  def compress_payload(payload); end
  def config; end
  def context; end
  def default_http_headers; end
  def determine_hosts; end
  def http(url); end
  def initialize(context, type, instant_key = nil); end
  def instant_key; end
  def logger; end
  def post(uri, body, headers = nil); end
  def post_payload(hosts, payload, headers); end
  def report(payload, headers = nil); end
  def request(uri, &connector); end
  def type; end
  def uri(host); end
end
class ScoutApm::BackgroundWorker
  def context; end
  def initialize(context, period = nil); end
  def logger; end
  def period; end
  def run_once; end
  def running?; end
  def start(&block); end
  def stop; end
end
module ScoutApm::BucketNameSplitter
  def bucket_name; end
  def bucket_type; end
  def key; end
  def scope_hash; end
  def split_metric_name(metric_name); end
end
class ScoutApm::StackItem
  def ==(o); end
  def children_time; end
  def children_time=(arg0); end
  def eql?(o); end
  def initialize(metric_name); end
  def metric_name; end
  def start_time; end
end
class ScoutApm::MetricSet
  def ==(other); end
  def absorb(metric); end
  def absorb_all(metrics); end
  def combine!(other); end
  def eql?(other); end
  def initialize; end
  def metrics; end
end
class ScoutApm::DbQueryMetricSet
  def <<(stat); end
  def at_limit?; end
  def combine!(other); end
  def context; end
  def each; end
  def increment_transaction_count!; end
  def initialize(context); end
  def inspect; end
  def lookup(other); end
  def marshal_dump; end
  def marshal_load(array); end
  def metrics; end
  def metrics_to_report; end
  include Enumerable
end
class ScoutApm::Store
  def add_sampler(sampler_klass); end
  def collect_samplers(rp); end
  def current_period; end
  def current_timestamp; end
  def find_period(timestamp = nil); end
  def initialize(context); end
  def logger; end
  def tick!; end
  def track!(metrics, options = nil); end
  def track_db_query_metrics!(db_query_metric_set, options = nil); end
  def track_histograms!(histograms, options = nil); end
  def track_job!(job); end
  def track_one!(type, name, value, options = nil); end
  def track_slow_job!(job); end
  def track_slow_transaction!(slow_transaction); end
  def write_reporting_period(layaway, time, rp); end
  def write_to_layaway(layaway, force = nil); end
end
class ScoutApm::StoreReportingPeriodTimestamp
  def ==(o); end
  def age_in_seconds; end
  def eql?(o); end
  def hash; end
  def initialize(time = nil); end
  def self.minutes_ago(min, base_time = nil); end
  def strftime(pattern = nil); end
  def timestamp; end
  def to_s; end
  def to_time; end
end
class ScoutApm::StoreReportingPeriod
  def absorb_metrics!(metrics); end
  def db_query_metric_set; end
  def db_query_metrics_payload; end
  def histograms; end
  def initialize(timestamp, context); end
  def job_traces; end
  def jobs; end
  def merge(other); end
  def merge_db_query_metrics!(other_metric_set); end
  def merge_histograms!(new_histograms); end
  def merge_jobs!(jobs); end
  def merge_metrics!(other_metric_set); end
  def merge_slow_jobs!(new_jobs); end
  def merge_slow_transactions!(new_transactions); end
  def metric_set; end
  def metrics_payload; end
  def request_count; end
  def request_traces; end
  def slow_jobs_payload; end
  def slow_transactions_payload; end
  def timestamp; end
end
class ScoutApm::FakeStore
  def add_sampler(sampler); end
  def current_timestamp; end
  def initialize; end
  def tick!; end
  def track!(metrics, options = nil); end
  def track_db_query_metrics!(db_query_metric_set, options = nil); end
  def track_histograms!(histograms, options = nil); end
  def track_job!(job); end
  def track_one!(type, name, value, options = nil); end
  def track_slow_job!(job); end
  def track_slow_transaction!(slow_transaction); end
  def write_to_layaway(layaway, force = nil); end
end
module ScoutApm::Tracer
  def self.included(klass); end
  def self.instrument(type, name, options = nil); end
end
module ScoutApm::Tracer::ClassMethods
  def _determine_instrumented_name(method_name, type); end
  def _find_unused_method_name; end
  def _instrumentable?(method_name); end
  def _instrumented?(instrumented_name, method_name); end
  def _instrumented_method_name(method_name, type); end
  def _instrumented_method_string(instrumented_name, uninstrumented_name, type, name, options = nil); end
  def _sanitize_name(name); end
  def _uninstrumented_method_name(method_name, type); end
  def instrument(type, name, options = nil, &block); end
  def instrument_method(method_name, options = nil); end
end
module ScoutApm::Transaction
  def self.ignore!; end
  def self.rename(name); end
end
class ScoutApm::Context
  def add(hash); end
  def add_user(hash); end
  def context; end
  def initialize(context); end
  def key_valid?(key_value); end
  def logger; end
  def self.add(hash); end
  def self.add_user(hash); end
  def self.current; end
  def to_flat_hash; end
  def to_hash; end
  def update_context(attr, hash); end
  def valid_type?(classes, obj); end
  def value_valid?(key_value); end
end
class ScoutApm::InstantReporting
  def call; end
  def initialize(trace, instant_key); end
end
class ScoutApm::BackgroundRecorder
  def context; end
  def initialize(context); end
  def logger; end
  def queue; end
  def record!(request); end
  def start; end
  def stop; end
  def thread; end
  def thread_func; end
end
class ScoutApm::SynchronousRecorder
  def context; end
  def initialize(context); end
  def logger; end
  def record!(request); end
  def start; end
  def stop; end
end
class ScoutApm::MetricMeta
  def ==(o); end
  def as_json; end
  def backtrace; end
  def backtrace=(bt); end
  def client_id; end
  def client_id=(arg0); end
  def desc; end
  def desc=(arg0); end
  def eql?(o); end
  def extra; end
  def extra=(arg0); end
  def hash; end
  def initialize(metric_name, options = nil); end
  def key_metric?; end
  def metric_id; end
  def metric_id=(arg0); end
  def metric_name; end
  def metric_name=(arg0); end
  def name; end
  def scope; end
  def scope=(arg0); end
  def self.key_metric?(metric_name); end
  def type; end
  include ScoutApm::BucketNameSplitter
end
class ScoutApm::MetricStats
  def as_json; end
  def call_count; end
  def call_count=(arg0); end
  def combine!(other); end
  def initialize(scoped = nil); end
  def latency; end
  def latency=(arg0); end
  def max_call_time; end
  def max_call_time=(arg0); end
  def min_call_time; end
  def min_call_time=(arg0); end
  def queue; end
  def queue=(arg0); end
  def sum_of_squares; end
  def sum_of_squares=(arg0); end
  def total_call_time; end
  def total_call_time=(arg0); end
  def total_exclusive_time; end
  def total_exclusive_time=(arg0); end
  def update!(call_time, exclusive_time = nil, extra_metrics = nil); end
end
class ScoutApm::DbQueryMetricStats
  def as_json; end
  def call_count; end
  def call_time; end
  def combine!(other); end
  def histogram; end
  def increment_transaction_count!; end
  def initialize(model_name, operation, scope, call_count, call_time, rows_returned); end
  def key; end
  def max_call_time; end
  def max_rows_returned; end
  def min_call_time; end
  def min_rows_returned; end
  def model_name; end
  def operation; end
  def rows_returned; end
  def scope; end
  def transaction_count; end
end
class ScoutApm::SlowTransaction
  def allocation_metrics; end
  def allocations; end
  def as_json; end
  def call; end
  def clear_metrics!; end
  def context; end
  def context_hash; end
  def git_sha; end
  def git_sha=(arg0); end
  def has_metrics?; end
  def hostname; end
  def hostname=(arg0); end
  def initialize(agent_context, uri, metric_name, total_call_time, metrics, allocation_metrics, context, time, raw_stackprof, mem_delta, allocations, score, truncated_metrics); end
  def mem_delta; end
  def meta; end
  def metric_name; end
  def metrics; end
  def name; end
  def prof; end
  def score; end
  def seconds_since_startup; end
  def seconds_since_startup=(arg0); end
  def time; end
  def total_call_time; end
  def truncated_metrics; end
  def uri; end
  include ScoutApm::BucketNameSplitter
end
class ScoutApm::SlowJobRecord
  def allocation_metrics; end
  def allocations; end
  def call; end
  def context; end
  def exclusive_time; end
  def git_sha; end
  def hostname; end
  def initialize(agent_context, queue_name, job_name, time, total_time, exclusive_time, context, metrics, allocation_metrics, mem_delta, allocations, score, truncated_metrics); end
  def job_name; end
  def mem_delta; end
  def metric_name; end
  def metrics; end
  def name; end
  def queue_name; end
  def score; end
  def seconds_since_startup; end
  def time; end
  def total_call_time; end
  def total_time; end
  def truncated_metrics; end
end
class ScoutApm::ScoredItemSet
  def <<(new_item); end
  def ==(other); end
  def each; end
  def eql?(other); end
  def full?; end
  def initialize(max_size = nil); end
  def items; end
  def max_size; end
  def store!(new_item); end
  include Enumerable
end
class ScoutApm::SlowRequestPolicy
  def age_points(age); end
  def context; end
  def initialize(context); end
  def last_seen; end
  def percent_time_points(percent); end
  def percentile_points(percentile); end
  def score(request); end
  def speed_points(time); end
  def stored!(request); end
end
class ScoutApm::SlowJobPolicy
  def age_points(age); end
  def context; end
  def initialize(context); end
  def last_seen; end
  def percent_time_points(percent); end
  def percentile_points(percentile); end
  def score(request); end
  def speed_points(time); end
  def stored!(request); end
end
class ScoutApm::JobRecord
  def ==(o); end
  def combine!(other); end
  def eql?(o); end
  def errors; end
  def exclusive_time; end
  def hash; end
  def initialize(queue_name, job_name, total_time, exclusive_time, errors, metrics); end
  def job_name; end
  def metric_set; end
  def metrics; end
  def queue_name; end
  def run_count; end
  def total_time; end
end
class ScoutApm::RequestHistograms
  def add(item, value); end
  def approximate_quantile_of_value(item, value); end
  def each_name; end
  def histogram_size; end
  def histograms; end
  def initialize(histogram_size = nil); end
  def initialize_histograms_hash; end
  def quantile(item, q); end
  def raw(item); end
  def reset_all!; end
end
class ScoutApm::TransactionTimeConsumed
  def add(item, duration); end
  def call_count_for(item); end
  def endpoints; end
  def initialize; end
  def percent_of_total(item); end
  def total_duration; end
  def total_time_for(item); end
end
class ScoutApm::TransactionTimeConsumed::TotalTimeRecord < Struct
  def add(duration); end
  def count; end
  def count=(_); end
  def initialize; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def total_duration; end
  def total_duration=(_); end
end
module ScoutApm::AttributeArranger
  def self.call(subject, attributes_list); end
end
class ScoutApm::GitRevision
  def app_root; end
  def context; end
  def detect; end
  def detect_from_capistrano; end
  def detect_from_config; end
  def detect_from_git; end
  def detect_from_heroku; end
  def initialize(context); end
  def logger; end
  def sha; end
  def sha=(arg0); end
end
module ScoutApm::Serializers
end
class ScoutApm::Serializers::PayloadSerializer
  def self.deserialize(data); end
  def self.serialize(metadata, metrics, slow_transactions, jobs, slow_jobs, histograms, db_query_metrics); end
end
module ScoutApm::Serializers::PayloadSerializerToJson
  def self.escape(string); end
  def self.format_by_type(formatee); end
  def self.jsonify_hash(hash); end
  def self.rearrange_slow_transaction(slow_t); end
  def self.rearrange_the_metrics(metrics); end
  def self.rearrange_the_slow_transactions(slow_transactions); end
  def self.serialize(metadata, metrics, slow_transactions, jobs, slow_jobs, histograms, db_query_metrics); end
end
class ScoutApm::Serializers::JobsSerializerToJson
  def as_json; end
  def initialize(jobs); end
  def jobs; end
end
class ScoutApm::Serializers::SlowJobsSerializerToJson
  def as_json; end
  def initialize(jobs); end
  def jobs; end
end
class ScoutApm::Serializers::MetricsToJsonSerializer
  def as_json; end
  def initialize(metrics); end
  def metric_as_json(meta, stat, child_metrics = nil); end
  def metrics; end
  def transform_child_metrics(metrics); end
end
class ScoutApm::Serializers::HistogramsSerializerToJson
  def as_json; end
  def histograms; end
  def initialize(histograms); end
end
class ScoutApm::Serializers::DbQuerySerializerToJson
  def as_json; end
  def db_query_metrics; end
  def initialize(db_query_metrics); end
end
class ScoutApm::Serializers::DirectiveSerializer
  def self.deserialize(data); end
  def self.serialize(data); end
end
class ScoutApm::Serializers::AppServerLoadSerializer
  def self.deserialize(data); end
  def self.serialize(data); end
end
class ScoutApm::Middleware
  def attempt_to_start_agent; end
  def call(env); end
  def initialize(app); end
end
module ScoutApm::Instant
end
class ScoutApm::Instant::Page
  def add_to_body(content); end
  def add_to_head(content); end
  def initialize(html); end
  def res; end
end
class ScoutApm::Instant::Util
  def self.read_asset(name, vars = nil); end
end
class ScoutApm::Instant::Middleware
  def call(env); end
  def initialize(app); end
end
class ScoutApm::Instant::DevTraceResponseManipulator
  def adjust_ajax_header; end
  def adjust_html_response; end
  def adjust_newer_rails_response; end
  def adjust_older_rails_response; end
  def adjust_rack_proxy_response; end
  def ajax_request?; end
  def apm_host; end
  def call; end
  def content_type; end
  def dev_trace_disabled?; end
  def development_asset?; end
  def env; end
  def html_manipulator; end
  def initialize(env, rack_response); end
  def logger; end
  def newer_rails_response?; end
  def older_rails_response?; end
  def path; end
  def payload; end
  def preconditions_met?; end
  def rack_body; end
  def rack_headers; end
  def rack_proxy_response?; end
  def rack_response; end
  def rack_status; end
  def rebuild_rack_response; end
  def trace; end
  def tracked_request; end
end
module ScoutApm::Rack
  def self.install!; end
  def self.transaction(endpoint_name, env); end
end
module ScoutApm::Remote
end
class ScoutApm::Remote::Server
  def bind; end
  def initialize(bind, port, router, logger); end
  def logger; end
  def port; end
  def router; end
  def running?; end
  def start; end
  def stop; end
end
class ScoutApm::Remote::Router
  def assert_type(message); end
  def call_route(message); end
  def handle(msg); end
  def initialize(recorder, logger); end
  def logger; end
  def routes; end
end
class ScoutApm::Remote::Message
  def args; end
  def command; end
  def encode; end
  def initialize(type, command, *args); end
  def self.decode(msg); end
  def type; end
end
class ScoutApm::Remote::Recorder
  def initialize(remote_agent_host, remote_agent_port, logger); end
  def logger; end
  def post(encoded_message); end
  def record!(request); end
  def remote_agent_host; end
  def remote_agent_port; end
  def start; end
  def stop; end
end
module ScoutApm::Instruments::Resque
  def around_perform_with_scout_instruments(*args); end
  def find_queue; end
end
class ScoutApm::AgentContext
  def become_remote_client!(host, port); end
  def config; end
  def config=(config); end
  def dev_trace_enabled?; end
  def environment; end
  def environment=(env); end
  def extensions; end
  def extensions=(arg0); end
  def ignored_uris; end
  def initialize; end
  def installed!; end
  def installed?; end
  def layaway; end
  def log_configuration_settings; end
  def logger; end
  def marshal_dump; end
  def marshal_load(*args); end
  def process_start_time; end
  def recorder; end
  def recorder=(recorder); end
  def request_histograms; end
  def request_histograms_by_time; end
  def shutting_down!; end
  def shutting_down?; end
  def slow_job_policy; end
  def slow_request_policy; end
  def start_remote_server!(bind, port); end
  def started!; end
  def started?; end
  def store; end
  def store=(store); end
  def transaction_time_consumed; end
end
class ScoutApm::RecorderFactory
  def self.build(context); end
end
class ScoutApm::LoggerFactory
  def self.build(config, environment); end
  def self.build_minimal_logger; end
end
class ScoutApm::InstrumentManager
  def already_installed?(instrument_klass); end
  def config; end
  def context; end
  def framework; end
  def initialize(context); end
  def install!; end
  def install_instrument(instrument_klass); end
  def installed_instruments; end
  def logger; end
  def skip_instrument?(instrument_klass); end
end
class ScoutApm::PeriodicWork
  def clean_old_percentiles; end
  def context; end
  def initialize(context); end
  def run; end
end
class ScoutApm::Agent::Preconditions
  def check?(context); end
  def force?; end
end
class ScoutApm::Agent::ExitHandler
  def context; end
  def environment; end
  def exit_handler_supported?; end
  def initialize(context); end
  def install; end
  def logger; end
  def shutdown; end
end
module ScoutApm::Tasks
end
class ScoutApm::Tasks::Doctor
  def agent_context; end
  def configuration_settings; end
  def initialize; end
  def installed_instruments; end
  def log_details; end
  def run!; end
  def self.run!; end
end
class ScoutApm::Tasks::Support
  def initialize; end
  def run!; end
  def self.run!; end
end
module ScoutApm::Extensions
end
class ScoutApm::Extensions::Config
  def agent_context; end
  def initialize(agent_context); end
  def logger; end
  def periodic_callbacks; end
  def periodic_callbacks=(arg0); end
  def run_periodic_callbacks(reporting_period, metadata); end
  def run_transaction_callbacks(converter_results, context, scope_layer); end
  def self.add_periodic_callback(callback); end
  def self.add_transaction_callback(callback); end
  def self.agent_context; end
  def transaction_callbacks; end
  def transaction_callbacks=(arg0); end
end
class ScoutApm::Extensions::TransactionCallbackPayload
  def app_name; end
  def context; end
  def converter_results; end
  def converter_results=(arg0); end
  def duration_ms; end
  def error?; end
  def hostname; end
  def initialize(agent_context, converter_results, context, scope_layer); end
  def queue_time_ms; end
  def transaction_name; end
  def transaction_type_slug; end
  def transation_type; end
end
class ScoutApm::Railtie < Rails::Railtie
end

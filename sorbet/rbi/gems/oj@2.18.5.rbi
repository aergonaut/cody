# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `oj` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module Oj

  private

  def compat_load(*_arg0); end
  def default_options; end
  def default_options=(_arg0); end
  def dump(*_arg0); end
  def load(*_arg0); end
  def load_file(*_arg0); end
  def mimic_JSON(*_arg0); end
  def object_load(*_arg0); end
  def register_odd(*_arg0); end
  def register_odd_raw(*_arg0); end
  def safe_load(_arg0); end
  def saj_parse(*_arg0); end
  def sc_parse(*_arg0); end
  def strict_load(*_arg0); end
  def to_file(*_arg0); end
  def to_stream(*_arg0); end

  class << self
    def compat_load(*_arg0); end
    def default_options; end
    def default_options=(_arg0); end
    def dump(*_arg0); end
    def load(*_arg0); end
    def load_file(*_arg0); end
    def mimic_JSON(*_arg0); end
    def mimic_loaded(mimic_paths = T.unsafe(nil)); end
    def object_load(*_arg0); end
    def register_odd(*_arg0); end
    def register_odd_raw(*_arg0); end
    def safe_load(_arg0); end
    def saj_parse(*_arg0); end
    def sc_parse(*_arg0); end
    def strict_load(*_arg0); end
    def to_file(*_arg0); end
    def to_stream(*_arg0); end
  end
end

class Oj::Bag
  def initialize(args = T.unsafe(nil)); end

  def ==(other); end
  def eql?(other); end
  def method_missing(m, *args, &block); end
  def respond_to?(m); end

  class << self
    def define_class(classname); end
  end
end

class Oj::CStack
end

class Oj::DepthError < ::Oj::Error
end

class Oj::Doc
  def clone; end
  def close; end
  def dump(*_arg0); end
  def dup; end
  def each_child(*_arg0); end
  def each_leaf(*_arg0); end
  def each_value(*_arg0); end
  def fetch(*_arg0); end
  def home; end
  def local_key; end
  def move(_arg0); end
  def size; end
  def type(*_arg0); end
  def where?; end

  class << self
    def open(_arg0); end
    def open_file(_arg0); end
    def parse(_arg0); end
  end
end

class Oj::EasyHash < ::Hash
  def initialize; end

  def [](key); end
  def method_missing(m, *args, &block); end
  def respond_to?(m); end
end

class Oj::Error < ::StandardError
end

class Oj::LoadError < ::Oj::Error
end

class Oj::MimicDumpOption < ::Hash
  def initialize; end

  def []=(key, value); end
end

class Oj::MimicError < ::Oj::Error
end

class Oj::ParseError < ::Oj::Error
end

class Oj::Saj
  def initialize; end


  private

  def add_value(value, key); end
  def array_end(key); end
  def array_start(key); end
  def error(message, line, column); end
  def hash_end(key); end
  def hash_start(key); end
end

class Oj::ScHandler
  def initialize; end


  private

  def add_value(value); end
  def array_append(a, value); end
  def array_end; end
  def array_start; end
  def hash_end; end
  def hash_key(key); end
  def hash_set(h, key, value); end
  def hash_start; end
end

class Oj::StreamWriter
  def pop; end
  def pop_all; end
  def push_array(*_arg0); end
  def push_json(*_arg0); end
  def push_key(_arg0); end
  def push_object(*_arg0); end
  def push_value(*_arg0); end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

class Oj::StringWriter
  def pop; end
  def pop_all; end
  def push_array(*_arg0); end
  def push_json(*_arg0); end
  def push_key(_arg0); end
  def push_object(*_arg0); end
  def push_value(*_arg0); end
  def reset; end
  def to_s; end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

Oj::VERSION = T.let(T.unsafe(nil), String)

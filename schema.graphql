"""
The mutation root
"""
type Mutation {
  """
  Update the currently authenticated user
  """
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type PullRequest implements Node {
  id: ID!
  number: String!
  repository: String!
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    status: String
  ): ReviewerConnection
  status: String!
}

"""
The connection type for PullRequest.
"""
type PullRequestConnection {
  """
  A list of edges.
  """
  edges: [PullRequestEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PullRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequest
}

"""
The query root
"""
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  The currently authenticated user
  """
  viewer: User
}

type Repository implements Node {
  id: ID!
  name: String!
  owner: String!

  """
  Find a PullRequest by number
  """
  pullRequest(number: String!): PullRequest

  """
  This reapository's Pull Requests
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    status: String
  ): PullRequestConnection

  """
  Find a Review Rule by code
  """
  reviewRule(shortCode: String!): ReviewRule

  """
  This repository's review rules
  """
  reviewRules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewRuleConnection
}

"""
The connection type for Repository.
"""
type RepositoryConnection {
  """
  A list of edges.
  """
  edges: [RepositoryEdge]

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

type ReviewRule implements Node {
  id: ID!

  """
  The criteria used to match this rule
  """
  match: String!

  """
  The rule's name
  """
  name: String!

  """
  The repository that owns this rule
  """
  repository: String!

  """
  The reviewer assigned to this rule
  """
  reviewer: String!

  """
  Short code identifying the rule in commands
  """
  shortCode: String!

  """
  The rule's type
  """
  type: String!
}

"""
The connection type for ReviewRule.
"""
type ReviewRuleConnection {
  """
  A list of edges.
  """
  edges: [ReviewRuleEdge]

  """
  A list of nodes.
  """
  nodes: [ReviewRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReviewRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReviewRule
}

type Reviewer implements Node {
  id: ID!
  login: String!
  pullRequest: PullRequest!

  """
  The Review Rule that added this Reviewer
  """
  reviewRule: ReviewRule
  status: ReviewerStatus!
}

"""
The connection type for Reviewer.
"""
type ReviewerConnection {
  """
  A list of edges.
  """
  edges: [ReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [Reviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Reviewer
}

"""
The review status of a Reviewer
"""
enum ReviewerStatus {
  """
  Approved
  """
  APPROVED

  """
  Pending Approval
  """
  PENDING_APPROVAL
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  paused: Boolean!
  sendNewReviewsSummary: Boolean!
  timezone: String!
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User
}

type User implements Node {
  """
  Find the user's assigned reviews
  """
  assignedReviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter assigned reviews by status
    """
    status: ReviewerStatus
  ): ReviewerConnection

  """
  The user's email
  """
  email: String
  id: ID!

  """
  The user's login
  """
  login: String!

  """
  The user's name
  """
  name: String!

  """
  Opt-in choice to temporarily pause assignment of new reviews
  """
  paused: Boolean!
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryConnection

  """
  Find a given repository by the owner and name
  """
  repository(name: String!, owner: String!): Repository

  """
  Opt-in choice for daily code review summary email
  """
  sendNewReviewsSummary: Boolean!

  """
  The user's configured timezone
  """
  timezone: String!
}